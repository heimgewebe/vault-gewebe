name: api-smoke
on:
  pull_request:
    branches: [ main ]
    paths:
      - "apps/api/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/api-smoke.yml"
  push:
    branches: [ main ]
    paths:
      - "apps/api/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/api-smoke.yml"
  workflow_dispatch:
permissions:
  contents: read
concurrency:
  group: api-smoke-${{ github.ref }}
  cancel-in-progress: true
jobs:
  ultra_light_health:
    name: API – ultra-light smoke (health endpoints)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      CARGO_TARGET_DIR: ./target
    defaults:
      run:
        working-directory: apps/api
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Inject build metadata (compile-time env)
        run: |
          echo "GIT_COMMIT_SHA=${GITHUB_SHA}" >> "$GITHUB_ENV"
          echo "BUILD_TIMESTAMP=${{ github.run_started_at }}" >> "$GITHUB_ENV"
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            apps/api -> target
      - name: Build release (fast start)
        run: cargo build --locked --release --bin weltgewebe-api
      - name: Run API in background
        env:
          API_BIND: 127.0.0.1:8787
          RUST_LOG: info
          RUST_BACKTRACE: 1
        run: |
          if [ ! -x ./target/release/weltgewebe-api ]; then
            echo "compiled API binary missing"
            ls -al ./target/release || true
            exit 1
          fi
          nohup ./target/release/weltgewebe-api >/tmp/api.log 2>&1 &
          echo $! > /tmp/api.pid
          # Wait up to 5 seconds for the PID file to exist
          for i in {1..10}; do
            [ -f /tmp/api.pid ] && break
            sleep 0.5
          done
          if [ ! -f /tmp/api.pid ]; then
            echo "PID file not found after waiting"
            exit 1
          fi
          if ! kill -0 "$(cat /tmp/api.pid)" 2>/dev/null; then
            echo "API process failed to start"
            exit 1
          fi
      - name: Probe /version (startup)
        run: |
          set -euo pipefail
          body="$(curl --max-time 10 --fail-with-body http://127.0.0.1:8787/version)"
          if ! echo "$body" | jq empty >/dev/null 2>&1; then
            echo "API did not return valid JSON: $body"
            exit 1
          fi
          echo "::group::/version body"
          echo "$body"
          echo "::endgroup::"
          # Validate fields using jq (more robust than grep on strings)
          echo "$body" | jq -e '.version // empty | .commit // empty | .build_timestamp // empty' >/dev/null

          # Optional: also assert types (string/string/number) – harmless if types differ:
          # echo "$body" | jq -e '(.version|type=="string") and (.commit|type=="string") and (.build_timestamp|type=="number")' >/dev/null
      - name: Wait for API health endpoint
        run: |
          ok=0
          for i in {1..60}; do
            if curl -fsS http://127.0.0.1:8787/health/live; then ok=1; break; fi
            sleep 0.5
          done
          [ "$ok" -eq 1 ] || { echo "health/live not ready in time"; exit 1; }
      - name: Probe /health and /metrics
        run: |
          set -euxo pipefail
          curl -fsS http://127.0.0.1:8787/health/live
          curl -fsS -o /dev/null -w "%{http_code}\n" http://127.0.0.1:8787/health/ready | grep -E '^(200|503)$'
          # /metrics darf 200 liefern, Inhalt ist optional; zeigen die ersten Zeilen, falls vorhanden:
          curl -fsS http://127.0.0.1:8787/metrics | head -n 5 || echo "no /metrics yet (ok)"
      - name: Probe /version (JSON shape)
        run: |
          set -euxo pipefail
          body="$(curl -fsS http://127.0.0.1:8787/version)"
          echo "$body" | grep -q '"version"' && echo "$body" | grep -q '"commit"' && echo "$body" | grep -q '"build_timestamp"'
      - name: Stop API
        if: always()
        run: |
          PID_FILE=/tmp/api.pid
          if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if kill -0 "$PID" 2>/dev/null; then
              kill "$PID" 2>/dev/null || true
              wait "$PID" 2>/dev/null || true
            fi
          fi
      - name: Upload API log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: api-log
          path: /tmp/api.log
