name: Run Bats test suite
description: Run the repository's Bats-based test suites
inputs:
  working-directory:
    description: Directory to run bats from
    required: false
    default: .
  bats-args:
    description: "Arguments to pass to the bats command (for example: \"-r tests\")"
    required: false
    default: -r tests
runs:
  using: composite
  steps:
    - name: Ensure bats is available
      shell: bash
      run: |
        set -euo pipefail
        if command -v bats >/dev/null 2>&1; then
          echo "Using existing bats: $(bats -v)"
          exit 0
        fi
        sudo apt-get update -y
        sudo apt-get install -y bats
    - name: Install bats helpers
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -euo pipefail
        mkdir -p test
        if [ ! -d test/bats-support ]; then
          git clone https://github.com/bats-core/bats-support.git test/bats-support
          (cd test/bats-support && git checkout v0.3.0)
        fi
        if [ ! -d test/bats-assert ]; then
          git clone https://github.com/bats-core/bats-assert.git test/bats-assert
          (cd test/bats-assert && git checkout v2.0.0)
        fi
    - name: Execute bats
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        BATS_ARGS: ${{ inputs.bats-args }}
      run: |
        set -euo pipefail
        if [ -n "$BATS_ARGS" ]; then
          # Use eval and set -- to properly handle quoted arguments.
          eval "set -- $BATS_ARGS"
          _bats_args=("$@")
        else
          _bats_args=()
        fi
        bats "${_bats_args[@]}"
