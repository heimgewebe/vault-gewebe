name: CI (heavy on demand)

on:
  workflow_dispatch: {}
  pull_request:
    types: [labeled, synchronize, reopened, ready_for_review]
    branches: [ main ]

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      run_heavy: ${{ steps.flags.outputs.run_heavy }}
    steps:
      - id: flags
        shell: bash
        run: |
          labels="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run_heavy=true" >> "$GITHUB_OUTPUT"
          elif echo "$labels" | grep -qiE '(^| )full-ci( |$)'; then
            echo "run_heavy=true" >> "$GITHUB_OUTPUT"
          else
            echo "run_heavy=false" >> "$GITHUB_OUTPUT"
          fi

  e2e:
    needs: gate
    if: needs.gate.outputs.run_heavy == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v5
      - name: Enable Rust problem matchers
        run: echo "::add-matcher::.github/rust.json"
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Check vendor snapshot
        run: bash scripts/check-vendor.sh
      - name: Build (release)
        run: cargo build --workspace --release
      - name: API smoke test
        env:
          RUST_LOG: info
          RUST_BACKTRACE: 1
        run: |
          set -euo pipefail
          target/release/hauski-core >server.log 2>&1 &
          server_pid=$!
          trap "kill $server_pid" EXIT

          for _ in $(seq 1 30); do
            if curl -sf "http://127.0.0.1:8080/ready" >/dev/null; then
              break
            fi
            sleep 1
          done

          curl -sf "http://127.0.0.1:8080/ready" | tee ready.txt
          curl -sf "http://127.0.0.1:8080/health" | tee health.txt

          curl -sf -X POST "http://127.0.0.1:8080/index/upsert" \
            -H 'content-type: application/json' \
            -d '{"doc_id":"smoke","namespace":"default","chunks":[{"text":"hi"}],"meta":{}}' | tee upsert.txt

          curl -sf -X POST "http://127.0.0.1:8080/index/search" \
            -H 'content-type: application/json' \
            -d '{"query":"hi","k":1,"namespace":"default"}' | tee search.txt

          curl -sf "http://127.0.0.1:8080/ask?q=hi&k=3&ns=default" | tee ask.txt
          jq -e '.hits | length >= 1' ask.txt

          curl -sf "http://127.0.0.1:8080/metrics" -o metrics.txt
          search_histogram_pattern='/http_request_duration_seconds_bucket/ && /path="\/index\/search"/ {print}'
          awk "$search_histogram_pattern" metrics.txt | head -n 5
          first_bucket=$(awk "$search_histogram_pattern {exit}" metrics.txt)
          if [ -n "$first_bucket" ]; then
            echo "::notice::index search histogram sample: $first_bucket"
          fi
          ask_histogram_pattern='/http_request_duration_seconds_bucket/ && /path="\/ask"/ {print}'
          awk "$ask_histogram_pattern" metrics.txt | head -n 5 
          ask_first_bucket=$(awk "$ask_histogram_pattern {exit}" metrics.txt)
          if [ -n "$ask_first_bucket" ]; then
            echo "::notice::ask histogram sample: $ask_first_bucket"
          fi
          echo "::notice::index search budget p95 target: 60ms (observability to be enforced later)"
      - name: Upload logs/artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hauski-heavy-artifacts
          path: |
            target
            server.log
            ready.txt
            health.txt
            upsert.txt
            search.txt
            ask.txt
            metrics.txt
          if-no-files-found: ignore
          retention-days: 7
