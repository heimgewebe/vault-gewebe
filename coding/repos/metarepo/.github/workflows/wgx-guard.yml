name: wgx-guard
permissions:
  contents: read

on:
  push:
    paths:
      - ".wgx/**"
      - ".github/workflows/wgx-guard.yml"
      - "pyproject.toml"
      - "Cargo.toml"
  pull_request:
    paths:
      - ".wgx/**"
      - ".github/workflows/wgx-guard.yml"
      - "pyproject.toml"
      - "Cargo.toml"
  workflow_dispatch:

jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Check .wgx/profile.yml presence
        run: |
          test -f .wgx/profile.yml || { echo "::error::.wgx/profile.yml missing"; exit 1; }
          echo "found .wgx/profile.yml"

      - name: Validate minimal schema keys
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install PyYAML for schema check
        run: |
          python -m pip install --upgrade pip
          python -m pip install "pyyaml~=6.0"

      - name: Run schema-lite check
        run: |
          python - <<'PY'
          import sys
          import yaml
          import pathlib

          p = pathlib.Path(".wgx/profile.yml")
          data = yaml.safe_load(p.read_text(encoding="utf-8"))

          required_top = ["version", "env_priority", "tooling", "tasks"]
          missing = [k for k in required_top if k not in data]
          if missing:
              print(f"::error::missing keys: {missing}")
              sys.exit(1)

          envp = data["env_priority"]
          if not isinstance(envp, list) or not envp:
              print("::error::env_priority must be a non-empty list")
              sys.exit(1)

          for t in ["up", "lint", "test", "build", "smoke"]:
              if t not in data["tasks"]:
                  print(f"::error::task '{t}' missing")
                  sys.exit(1)

          print("schema-lite ok")
          PY

      - name: (Optional) UV bootstrap (pyproject present)
        if: ${{ hashFiles('pyproject.toml') != '' }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh -o install-uv.sh
          # SHA256 for install.sh as of 2024-06-01; update if script changes
          echo "b2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2  install-uv.sh" > install-uv.sh.sha256
          sha256sum -c install-uv.sh.sha256
          if [ $? -ne 0 ]; then echo "::error::install.sh checksum failed"; exit 1; fi
          sh install-uv.sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv --version
          uv sync --frozen

      - name: Done
        run: echo "wgx-guard passed âœ…"
