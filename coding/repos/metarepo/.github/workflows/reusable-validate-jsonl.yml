name: reusable-validate-jsonl

on:
  workflow_call:
    inputs:
      jsonl_path:
        description: "Pfad zur JSONL-Datei (z. B. export/feed.jsonl)"
        required: true
        type: string
      schema_url:
        description: "Schema-URL (z. B. Raw-URL aus metarepo/contracts)"
        required: true
        type: string
      schema_path:
        description: "Alternativ: lokaler Pfad zum Schema (überschreibt schema_url, wenn gesetzt)"
        required: false
        type: string
      strict:
        description: "AJV strict mode (true/false)"
        required: false
        default: false
        type: boolean
      validate_formats:
        description: "Formate (uri, date-time, …) prüfen"
        required: false
        default: true
        type: boolean

jobs:
  validate-jsonl:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@8ade135a242bde00fd19c0e54fb3760beea110ee # v4.1.0

      - name: Setup Node
        uses: actions/setup-node@5e221d4786ffb21088b21dfc9c80efb16b52cd3b # v4.0.2

      - name: Install ajv-cli
        run: npm i -g ajv-cli@5.0.0

      - name: Validate JSONL lines
        shell: bash
        run: |
          set -euo pipefail
          FILE="${{ inputs.jsonl_path }}"
          SCHEMA_URL="${{ inputs.schema_url }}"
          SCHEMA_PATH_IN="${{ inputs.schema_path }}"
          STRICT="${{ inputs.strict }}"
          VALIDATE_FORMATS_RAW="${{ inputs.validate_formats }}"
          if [[ -z "${VALIDATE_FORMATS_RAW}" ]]; then
            VALIDATE_FORMATS_RAW="true"
          fi
          if [[ ! -f "$FILE" ]]; then
            echo "::notice title=validate-jsonl::Datei nicht gefunden: $FILE – übersprungen."
            exit 0
          fi
          SCHEMA="/tmp/schema.json"
          if [[ -n "${SCHEMA_PATH_IN}" ]]; then
            if [[ ! -f "${SCHEMA_PATH_IN}" ]]; then
              echo "::error title=validate-jsonl::Schema-Datei nicht gefunden: ${SCHEMA_PATH_IN}"
              exit 1
            fi
            cp "${SCHEMA_PATH_IN}" "$SCHEMA"
            SCHEMA_SOURCE="${SCHEMA_PATH_IN}"
          else
            if ! curl -fsSL "${SCHEMA_URL}" -o "$SCHEMA"; then
              echo "::error title=validate-jsonl::Schema konnte nicht geladen werden: ${SCHEMA_URL}"
              exit 1
            fi
            SCHEMA_SOURCE="${SCHEMA_URL}"
          fi
          VALIDATE_FORMATS="${VALIDATE_FORMATS_RAW,,}"
          FORMAT_FLAG=$([[ "$VALIDATE_FORMATS" == "false" ]] && echo "--validate-formats=false" || echo "--validate-formats=true")
          echo "Validiere $FILE gegen $SCHEMA_SOURCE (strict=$STRICT, formats=$VALIDATE_FORMATS)…"
          line_no=0
          fail_file="$(mktemp /tmp/jsonl-violations.XXXX.txt)"
          while IFS= read -r line || [[ -n "$line" ]]; do
            line_no=$((line_no+1))
            [[ -z "${line// }" ]] && continue
            # CRLF defensiv entfernen
            printf '%s\n' "$line" | tr -d '\r' > /tmp/event.json
            ajv validate \
              --spec=draft2020 \
              $([[ "$STRICT" == "true" ]] && echo "--strict=true" || echo "--strict=false") \
              $FORMAT_FLAG \
              -s "$SCHEMA" \
              -d /tmp/event.json || { echo "::error file=$FILE,line=$line_no::Schema-Verstoß in Zeile $line_no"; cat /tmp/event.json >> "$fail_file"; echo "" >> "$fail_file"; exit 1; }
          done < "$FILE"
          echo "OK: $((line_no)) Zeilen geprüft."

      - name: Upload failing samples (if any)
        if: failure()
        uses: actions/upload-artifact@604142bdf202109eb8df72c5824f1feae3d7f8e4 # v4.3.1
        with:
          name: jsonl-violations
          path: /tmp/jsonl-violations.*.txt
          retention-days: 7
